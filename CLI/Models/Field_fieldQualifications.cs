// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Field qualifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Field_fieldQualifications : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Default value for the field. This value is initially inserted to field when new concept code is created if no value is specified for that field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultValue { get; set; }
#nullable restore
#else
        public string DefaultValue { get; set; }
#endif
        /// <summary>Regular expression for value format</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Format { get; set; }
#nullable restore
#else
        public string Format { get; set; }
#endif
        /// <summary>Condition for regular expression</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormatCondition { get; set; }
#nullable restore
#else
        public string FormatCondition { get; set; }
#endif
        /// <summary>Description for regular expression</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FormatDescription { get; set; }
#nullable restore
#else
        public string FormatDescription { get; set; }
#endif
        /// <summary>Is value mandatory</summary>
        public bool? Mandatory { get; set; }
        /// <summary>Condition for being mandatory</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MandatoryCondition { get; set; }
#nullable restore
#else
        public string MandatoryCondition { get; set; }
#endif
        /// <summary>Maximum length for field value</summary>
        public int? MaxLength { get; set; }
        /// <summary>Minimum length for field value</summary>
        public int? MinLength { get; set; }
        /// <summary>Is the field value read only</summary>
        public bool? ReadOnly { get; set; }
        /// <summary>Should value be unique</summary>
        public bool? Unique { get; set; }
        /// <summary>Condition for being unique</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueCondition { get; set; }
#nullable restore
#else
        public string UniqueCondition { get; set; }
#endif
        /// <summary>Value is allowed if this condition is fullfilled</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ValueCondition { get; set; }
#nullable restore
#else
        public string ValueCondition { get; set; }
#endif
        /// <summary>Maximum value for numeric attribute value</summary>
        public double? ValueRangeMax { get; set; }
        /// <summary>Minimum value for numeric attribute value</summary>
        public double? ValueRangeMin { get; set; }
        /// <summary>Allowed values for value set attributes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ValueSetValues { get; set; }
#nullable restore
#else
        public List<string> ValueSetValues { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.Field_fieldQualifications"/> and sets the default values.
        /// </summary>
        public Field_fieldQualifications()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Field_fieldQualifications"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.Field_fieldQualifications CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.Field_fieldQualifications();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "defaultValue", n => { DefaultValue = n.GetStringValue(); } },
                { "format", n => { Format = n.GetStringValue(); } },
                { "formatCondition", n => { FormatCondition = n.GetStringValue(); } },
                { "formatDescription", n => { FormatDescription = n.GetStringValue(); } },
                { "mandatory", n => { Mandatory = n.GetBoolValue(); } },
                { "mandatoryCondition", n => { MandatoryCondition = n.GetStringValue(); } },
                { "maxLength", n => { MaxLength = n.GetIntValue(); } },
                { "minLength", n => { MinLength = n.GetIntValue(); } },
                { "readOnly", n => { ReadOnly = n.GetBoolValue(); } },
                { "unique", n => { Unique = n.GetBoolValue(); } },
                { "uniqueCondition", n => { UniqueCondition = n.GetStringValue(); } },
                { "valueCondition", n => { ValueCondition = n.GetStringValue(); } },
                { "valueRangeMax", n => { ValueRangeMax = n.GetDoubleValue(); } },
                { "valueRangeMin", n => { ValueRangeMin = n.GetDoubleValue(); } },
                { "valueSetValues", n => { ValueSetValues = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("defaultValue", DefaultValue);
            writer.WriteStringValue("format", Format);
            writer.WriteStringValue("formatCondition", FormatCondition);
            writer.WriteStringValue("formatDescription", FormatDescription);
            writer.WriteBoolValue("mandatory", Mandatory);
            writer.WriteStringValue("mandatoryCondition", MandatoryCondition);
            writer.WriteIntValue("maxLength", MaxLength);
            writer.WriteIntValue("minLength", MinLength);
            writer.WriteBoolValue("readOnly", ReadOnly);
            writer.WriteBoolValue("unique", Unique);
            writer.WriteStringValue("uniqueCondition", UniqueCondition);
            writer.WriteStringValue("valueCondition", ValueCondition);
            writer.WriteDoubleValue("valueRangeMax", ValueRangeMax);
            writer.WriteDoubleValue("valueRangeMin", ValueRangeMin);
            writer.WriteCollectionOfPrimitiveValues<string>("valueSetValues", ValueSetValues);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
