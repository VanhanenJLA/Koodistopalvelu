// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    /// <summary>
    /// Version and price list field, field type, reference identification and field value qualifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Field : IAdditionalDataHolder, IParsable
    {
        /// <summary>Used when fieldType is REFERENCE. Value &apos;true&apos; means that the target concept code of a forward reference must have ACTIVE status. If the value is &apos;false&apos;, a target with PROPOSAL status is also accepted.</summary>
        public bool? ActiveTargetsOnly { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Used when fieldType is REFERENCE. Value &apos;true&apos; means that this field is &apos;backward reference&apos; of a two-way-reference, value &apos;false&apos; means that this field is normal reference or &apos;forward reference&apos; of a two-way-reference. &apos;Backward reference&apos; fields can not be written to in POST, PUT and PATCH requests.</summary>
        public bool? BackwardReference { get; set; }
        /// <summary>Description of the field</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FieldDescription { get; set; }
#nullable restore
#else
        public string FieldDescription { get; set; }
#endif
        /// <summary>Name of the field</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FieldName { get; set; }
#nullable restore
#else
        public string FieldName { get; set; }
#endif
        /// <summary>Field qualifications</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Field_fieldQualifications? FieldQualifications { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Field_fieldQualifications FieldQualifications { get; set; }
#endif
        /// <summary>Sub-type of attribute field. Used when fieldType is ATTRIBUTE.</summary>
        public global::ApiSdk.Models.Field_fieldSubType? FieldSubType { get; set; }
        /// <summary>Type of the field</summary>
        public global::ApiSdk.Models.Field_fieldType? FieldType { get; set; }
        /// <summary>Used when fieldType is REFERENCE. Can field have multiple values (aka one-to-may reference)?</summary>
        public bool? MultipleValues { get; set; }
        /// <summary>Referenced classification and version. Used when fieldType is REFERENCE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ApiSdk.Models.Field_referencedCodeSystem? ReferencedCodeSystem { get; set; }
#nullable restore
#else
        public global::ApiSdk.Models.Field_referencedCodeSystem ReferencedCodeSystem { get; set; }
#endif
        /// <summary>If true, the field access is restricted.</summary>
        public bool? RestrictedAccess { get; set; }
        /// <summary>Optional XML language code qualifier for ATTRIBUTE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XmlLanguageCode { get; set; }
#nullable restore
#else
        public string XmlLanguageCode { get; set; }
#endif
        /// <summary>Optional XML identification qualifier for REFERENCE or ATTRIBUTE.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? XmlName { get; set; }
#nullable restore
#else
        public string XmlName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.Field"/> and sets the default values.
        /// </summary>
        public Field()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.Field"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.Field CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.Field();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activeTargetsOnly", n => { ActiveTargetsOnly = n.GetBoolValue(); } },
                { "backwardReference", n => { BackwardReference = n.GetBoolValue(); } },
                { "fieldDescription", n => { FieldDescription = n.GetStringValue(); } },
                { "fieldName", n => { FieldName = n.GetStringValue(); } },
                { "fieldQualifications", n => { FieldQualifications = n.GetObjectValue<global::ApiSdk.Models.Field_fieldQualifications>(global::ApiSdk.Models.Field_fieldQualifications.CreateFromDiscriminatorValue); } },
                { "fieldSubType", n => { FieldSubType = n.GetEnumValue<global::ApiSdk.Models.Field_fieldSubType>(); } },
                { "fieldType", n => { FieldType = n.GetEnumValue<global::ApiSdk.Models.Field_fieldType>(); } },
                { "multipleValues", n => { MultipleValues = n.GetBoolValue(); } },
                { "referencedCodeSystem", n => { ReferencedCodeSystem = n.GetObjectValue<global::ApiSdk.Models.Field_referencedCodeSystem>(global::ApiSdk.Models.Field_referencedCodeSystem.CreateFromDiscriminatorValue); } },
                { "restrictedAccess", n => { RestrictedAccess = n.GetBoolValue(); } },
                { "xmlLanguageCode", n => { XmlLanguageCode = n.GetStringValue(); } },
                { "xmlName", n => { XmlName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("activeTargetsOnly", ActiveTargetsOnly);
            writer.WriteBoolValue("backwardReference", BackwardReference);
            writer.WriteStringValue("fieldDescription", FieldDescription);
            writer.WriteStringValue("fieldName", FieldName);
            writer.WriteObjectValue<global::ApiSdk.Models.Field_fieldQualifications>("fieldQualifications", FieldQualifications);
            writer.WriteEnumValue<global::ApiSdk.Models.Field_fieldSubType>("fieldSubType", FieldSubType);
            writer.WriteEnumValue<global::ApiSdk.Models.Field_fieldType>("fieldType", FieldType);
            writer.WriteBoolValue("multipleValues", MultipleValues);
            writer.WriteObjectValue<global::ApiSdk.Models.Field_referencedCodeSystem>("referencedCodeSystem", ReferencedCodeSystem);
            writer.WriteBoolValue("restrictedAccess", RestrictedAccess);
            writer.WriteStringValue("xmlLanguageCode", XmlLanguageCode);
            writer.WriteStringValue("xmlName", XmlName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
