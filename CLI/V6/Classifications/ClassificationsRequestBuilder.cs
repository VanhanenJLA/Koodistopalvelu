// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models;
using ApiSdk.V6.Classifications.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.V6.Classifications
{
    /// <summary>
    /// Builds and executes requests for operations under \v6\classifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ClassificationsRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Gets an item from the ApiSdk.v6.classifications.item collection
        /// </summary>
        /// <returns>A Tuple&lt;List&lt;Command&gt;, List&lt;Command&gt;&gt;</returns>
        public Tuple<List<Command>, List<Command>> BuildCommand()
        {
            var commands = new List<Command>();
            var builder = new global::ApiSdk.V6.Classifications.Item.WithClassificationItemRequestBuilder(PathParameters);
            commands.Add(builder.BuildConceptcodesNavCommand());
            commands.Add(builder.BuildPricelistsNavCommand());
            commands.Add(builder.BuildVersionsNavCommand());
            return new(new(0), commands);
        }
        /// <summary>
        /// Get classification metadata with default version info and links to classification versions.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildListCommand()
        {
            var command = new Command("list");
            command.Description = "Get classification metadata with default version info and links to classification versions.";
            var pageSizeOption = new Option<int?>("--page-size", description: "Maximum number of results per page") {
            };
            pageSizeOption.IsRequired = false;
            command.AddOption(pageSizeOption);
            var pageOption = new Option<int?>("--page", description: "Refers to the page of the result list.") {
            };
            pageOption.IsRequired = false;
            command.AddOption(pageOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var pageSize = invocationContext.ParseResult.GetValueForOption(pageSizeOption);
                var page = invocationContext.ParseResult.GetValueForOption(pageOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.PageSize = pageSize;
                    q.QueryParameters.Page = page;
                });
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"400", Error.CreateFromDiscriminatorValue},
                    {"401", Error.CreateFromDiscriminatorValue},
                    {"404", Error.CreateFromDiscriminatorValue},
                    {"500", Error.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V6.Classifications.ClassificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public ClassificationsRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/v6/classifications{?page*,pageSize*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V6.Classifications.ClassificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ClassificationsRequestBuilder(string rawUrl) : base("{+baseurl}/v6/classifications{?page*,pageSize*}", rawUrl)
        {
        }
        /// <summary>
        /// Get classification metadata with default version info and links to classification versions.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.V6.Classifications.ClassificationsRequestBuilder.ClassificationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.V6.Classifications.ClassificationsRequestBuilder.ClassificationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get classification metadata with default version info and links to classification versions.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ClassificationsRequestBuilderGetQueryParameters 
        {
            /// <summary>Refers to the page of the result list.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Maximum number of results per page</summary>
            [QueryParameter("pageSize")]
            public int? PageSize { get; set; }
        }
    }
}
#pragma warning restore CS0618
