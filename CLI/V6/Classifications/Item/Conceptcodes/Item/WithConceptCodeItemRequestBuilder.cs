// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Cli.Commons.Extensions;
using Microsoft.Kiota.Cli.Commons.IO;
using Microsoft.Kiota.Cli.Commons;
using System.Collections.Generic;
using System.CommandLine;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.V6.Classifications.Item.Conceptcodes.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \v6\classifications\{classificationId}\conceptcodes\{conceptCodeId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithConceptCodeItemRequestBuilder : BaseCliRequestBuilder
    {
        /// <summary>
        /// Delete (i.e. change status to DELETED) single active concept code of specified classification and it&apos;s default version. Use of this sevice requires authentication.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildDeleteCommand()
        {
            var command = new Command("delete");
            command.Description = "Delete (i.e. change status to DELETED) single active concept code of specified classification and it's default version. Use of this sevice requires authentication.";
            var classificationIdOption = new Option<string>("--classification-id", description: "Classification identifier") {
            };
            classificationIdOption.IsRequired = true;
            command.AddOption(classificationIdOption);
            var conceptCodeIdOption = new Option<string>("--concept-code-id", description: "Concept Code identifier") {
            };
            conceptCodeIdOption.IsRequired = true;
            command.AddOption(conceptCodeIdOption);
            var validOnOption = new Option<Date?>("--valid-on", description: "Filter the results by timestamp indicating date value when concept code must be valid. Date in the 'YYYY-MM-DD' format.") {
            };
            validOnOption.IsRequired = false;
            command.AddOption(validOnOption);
            command.SetHandler(async (invocationContext) => {
                var classificationId = invocationContext.ParseResult.GetValueForOption(classificationIdOption);
                var conceptCodeId = invocationContext.ParseResult.GetValueForOption(conceptCodeIdOption);
                var validOn = invocationContext.ParseResult.GetValueForOption(validOnOption);
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToDeleteRequestInformation(q => {
                    q.QueryParameters.ValidOn = validOn;
                });
                if (classificationId is not null) requestInfo.PathParameters.Add("classificationId", classificationId);
                if (conceptCodeId is not null) requestInfo.PathParameters.Add("conceptCodeId", conceptCodeId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"400", Error.CreateFromDiscriminatorValue},
                    {"401", Error.CreateFromDiscriminatorValue},
                    {"403", Error.CreateFromDiscriminatorValue},
                    {"404", Error.CreateFromDiscriminatorValue},
                    {"500", Error.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Get all data of single active concept code of specified classification and it&apos;s default version.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildGetCommand()
        {
            var command = new Command("get");
            command.Description = "Get all data of single active concept code of specified classification and it's default version.";
            var classificationIdOption = new Option<string>("--classification-id", description: "Classification identifier") {
            };
            classificationIdOption.IsRequired = true;
            command.AddOption(classificationIdOption);
            var conceptCodeIdOption = new Option<string>("--concept-code-id", description: "Concept Code identifier") {
            };
            conceptCodeIdOption.IsRequired = true;
            command.AddOption(conceptCodeIdOption);
            var validOnOption = new Option<Date?>("--valid-on", description: "Filter the results by timestamp indicating date value when concept code must be valid. Date in the 'YYYY-MM-DD' format.") {
            };
            validOnOption.IsRequired = false;
            command.AddOption(validOnOption);
            var outputOption = new Option<FormatterType>("--output", () => FormatterType.JSON);
            command.AddOption(outputOption);
            var queryOption = new Option<string>("--query");
            command.AddOption(queryOption);
            command.SetHandler(async (invocationContext) => {
                var classificationId = invocationContext.ParseResult.GetValueForOption(classificationIdOption);
                var conceptCodeId = invocationContext.ParseResult.GetValueForOption(conceptCodeIdOption);
                var validOn = invocationContext.ParseResult.GetValueForOption(validOnOption);
                var output = invocationContext.ParseResult.GetValueForOption(outputOption);
                var query = invocationContext.ParseResult.GetValueForOption(queryOption);
                IOutputFilter outputFilter = invocationContext.BindingContext.GetService(typeof(IOutputFilter)) as IOutputFilter ?? throw new ArgumentNullException("outputFilter");
                IOutputFormatterFactory outputFormatterFactory = invocationContext.BindingContext.GetService(typeof(IOutputFormatterFactory)) as IOutputFormatterFactory ?? throw new ArgumentNullException("outputFormatterFactory");
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                var requestInfo = ToGetRequestInformation(q => {
                    q.QueryParameters.ValidOn = validOn;
                });
                if (classificationId is not null) requestInfo.PathParameters.Add("classificationId", classificationId);
                if (conceptCodeId is not null) requestInfo.PathParameters.Add("conceptCodeId", conceptCodeId);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"400", Error.CreateFromDiscriminatorValue},
                    {"401", Error.CreateFromDiscriminatorValue},
                    {"403", Error.CreateFromDiscriminatorValue},
                    {"404", Error.CreateFromDiscriminatorValue},
                    {"500", Error.CreateFromDiscriminatorValue},
                };
                var response = await reqAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken) ?? Stream.Null;
                response = (response != Stream.Null) ? await outputFilter.FilterOutputAsync(response, query, cancellationToken) : response;
                var formatter = outputFormatterFactory.GetFormatter(output);
                await formatter.WriteOutputAsync(response, cancellationToken);
            });
            return command;
        }
        /// <summary>
        /// Partial update of existing concept code in specified classification/default version. Use of this sevice requires authentication.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPatchCommand()
        {
            var command = new Command("patch");
            command.Description = "Partial update of existing concept code in specified classification/default version. Use of this sevice requires authentication.";
            var classificationIdOption = new Option<string>("--classification-id", description: "Classification identifier") {
            };
            classificationIdOption.IsRequired = true;
            command.AddOption(classificationIdOption);
            var conceptCodeIdOption = new Option<string>("--concept-code-id", description: "Concept Code identifier") {
            };
            conceptCodeIdOption.IsRequired = true;
            command.AddOption(conceptCodeIdOption);
            var validOnOption = new Option<Date?>("--valid-on", description: "Helps to select the right concept code, if there are several concept codes with the same id but with different validity periods. Date in the 'YYYY-MM-DD' format.") {
            };
            validOnOption.IsRequired = false;
            command.AddOption(validOnOption);
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            command.SetHandler(async (invocationContext) => {
                var classificationId = invocationContext.ParseResult.GetValueForOption(classificationIdOption);
                var conceptCodeId = invocationContext.ParseResult.GetValueForOption(conceptCodeIdOption);
                var validOn = invocationContext.ParseResult.GetValueForOption(validOnOption);
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = await ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNodeAsync("application/json", stream, cancellationToken);
                var model = parseNode.GetObjectValue<global::ApiSdk.Models.ConceptCode>(global::ApiSdk.Models.ConceptCode.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPatchRequestInformation(model, q => {
                    q.QueryParameters.ValidOn = validOn;
                });
                if (classificationId is not null) requestInfo.PathParameters.Add("classificationId", classificationId);
                if (conceptCodeId is not null) requestInfo.PathParameters.Add("conceptCodeId", conceptCodeId);
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"400", Error.CreateFromDiscriminatorValue},
                    {"401", Error.CreateFromDiscriminatorValue},
                    {"403", Error.CreateFromDiscriminatorValue},
                    {"404", Error.CreateFromDiscriminatorValue},
                    {"500", Error.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Update existing concept code in specified classification/default version. Use of this sevice requires authentication.
        /// </summary>
        /// <returns>A <see cref="Command"/></returns>
        public Command BuildPutCommand()
        {
            var command = new Command("put");
            command.Description = "Update existing concept code in specified classification/default version. Use of this sevice requires authentication.";
            var classificationIdOption = new Option<string>("--classification-id", description: "Classification identifier") {
            };
            classificationIdOption.IsRequired = true;
            command.AddOption(classificationIdOption);
            var conceptCodeIdOption = new Option<string>("--concept-code-id", description: "Concept Code identifier") {
            };
            conceptCodeIdOption.IsRequired = true;
            command.AddOption(conceptCodeIdOption);
            var validOnOption = new Option<Date?>("--valid-on", description: "Helps to select the right concept code, if there are several concept codes with the same id but with different validity periods. Date in the 'YYYY-MM-DD' format.") {
            };
            validOnOption.IsRequired = false;
            command.AddOption(validOnOption);
            var bodyOption = new Option<string>("--body", description: "The request body") {
            };
            bodyOption.IsRequired = true;
            command.AddOption(bodyOption);
            command.SetHandler(async (invocationContext) => {
                var classificationId = invocationContext.ParseResult.GetValueForOption(classificationIdOption);
                var conceptCodeId = invocationContext.ParseResult.GetValueForOption(conceptCodeIdOption);
                var validOn = invocationContext.ParseResult.GetValueForOption(validOnOption);
                var body = invocationContext.ParseResult.GetValueForOption(bodyOption) ?? string.Empty;
                var cancellationToken = invocationContext.GetCancellationToken();
                var reqAdapter = invocationContext.GetRequestAdapter();
                using var stream = new MemoryStream(Encoding.UTF8.GetBytes(body));
                var parseNode = await ParseNodeFactoryRegistry.DefaultInstance.GetRootParseNodeAsync("application/json", stream, cancellationToken);
                var model = parseNode.GetObjectValue<global::ApiSdk.Models.ConceptCode>(global::ApiSdk.Models.ConceptCode.CreateFromDiscriminatorValue);
                if (model is null) {
                    Console.Error.WriteLine("No model data to send.");
                    return;
                }
                var requestInfo = ToPutRequestInformation(model, q => {
                    q.QueryParameters.ValidOn = validOn;
                });
                if (classificationId is not null) requestInfo.PathParameters.Add("classificationId", classificationId);
                if (conceptCodeId is not null) requestInfo.PathParameters.Add("conceptCodeId", conceptCodeId);
                requestInfo.SetContentFromParsable(reqAdapter, "application/json", model);
                var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                    {"400", Error.CreateFromDiscriminatorValue},
                    {"401", Error.CreateFromDiscriminatorValue},
                    {"403", Error.CreateFromDiscriminatorValue},
                    {"404", Error.CreateFromDiscriminatorValue},
                    {"500", Error.CreateFromDiscriminatorValue},
                };
                await reqAdapter.SendNoContentAsync(requestInfo, errorMapping: errorMapping, cancellationToken: cancellationToken);
                Console.WriteLine("Success");
            });
            return command;
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        public WithConceptCodeItemRequestBuilder(Dictionary<string, object> pathParameters) : base("{+baseurl}/v6/classifications/{classificationId}/conceptcodes/{conceptCodeId}{?validOn*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithConceptCodeItemRequestBuilder(string rawUrl) : base("{+baseurl}/v6/classifications/{classificationId}/conceptcodes/{conceptCodeId}{?validOn*}", rawUrl)
        {
        }
        /// <summary>
        /// Delete (i.e. change status to DELETED) single active concept code of specified classification and it&apos;s default version. Use of this sevice requires authentication.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get all data of single active concept code of specified classification and it&apos;s default version.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Partial update of existing concept code in specified classification/default version. Use of this sevice requires authentication.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::ApiSdk.Models.ConceptCode body, Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderPatchQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::ApiSdk.Models.ConceptCode body, Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderPatchQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update existing concept code in specified classification/default version. Use of this sevice requires authentication.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::ApiSdk.Models.ConceptCode body, Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::ApiSdk.Models.ConceptCode body, Action<RequestConfiguration<global::ApiSdk.V6.Classifications.Item.Conceptcodes.Item.WithConceptCodeItemRequestBuilder.WithConceptCodeItemRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Delete (i.e. change status to DELETED) single active concept code of specified classification and it&apos;s default version. Use of this sevice requires authentication.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithConceptCodeItemRequestBuilderDeleteQueryParameters 
        {
            /// <summary>Filter the results by timestamp indicating date value when concept code must be valid. Date in the &apos;YYYY-MM-DD&apos; format.</summary>
            [QueryParameter("validOn")]
            public Date? ValidOn { get; set; }
        }
        /// <summary>
        /// Get all data of single active concept code of specified classification and it&apos;s default version.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithConceptCodeItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Filter the results by timestamp indicating date value when concept code must be valid. Date in the &apos;YYYY-MM-DD&apos; format.</summary>
            [QueryParameter("validOn")]
            public Date? ValidOn { get; set; }
        }
        /// <summary>
        /// Partial update of existing concept code in specified classification/default version. Use of this sevice requires authentication.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithConceptCodeItemRequestBuilderPatchQueryParameters 
        {
            /// <summary>Helps to select the right concept code, if there are several concept codes with the same id but with different validity periods. Date in the &apos;YYYY-MM-DD&apos; format.</summary>
            [QueryParameter("validOn")]
            public Date? ValidOn { get; set; }
        }
        /// <summary>
        /// Update existing concept code in specified classification/default version. Use of this sevice requires authentication.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithConceptCodeItemRequestBuilderPutQueryParameters 
        {
            /// <summary>Helps to select the right concept code, if there are several concept codes with the same id but with different validity periods. Date in the &apos;YYYY-MM-DD&apos; format.</summary>
            [QueryParameter("validOn")]
            public Date? ValidOn { get; set; }
        }
    }
}
#pragma warning restore CS0618
